"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefinitionList = exports.b = void 0;
const react_1 = __importDefault(require("react"));
const uikit_1 = require("@gravity-ui/uikit");
const HelpPopover_1 = require("../HelpPopover");
const cn_1 = require("../utils/cn");
const utils_1 = require("./utils");
require("./DefinitionList.css");
exports.b = (0, cn_1.block)('definition-list');
function getTitle(title, content) {
    if (title) {
        return title;
    }
    if (typeof content === 'string' || typeof content === 'number') {
        return String(content);
    }
    return undefined;
}
function getNoteElement(note) {
    let noteElement = null;
    const popoverClassName = (0, exports.b)('item-note-tooltip');
    if (note) {
        if (typeof note === 'string') {
            noteElement = (react_1.default.createElement(HelpPopover_1.HelpPopover, { className: popoverClassName, content: note, placement: ['bottom', 'top'] }));
        }
        if (typeof note === 'object') {
            noteElement = (react_1.default.createElement(HelpPopover_1.HelpPopover, Object.assign({ className: popoverClassName, placement: ['bottom', 'top'] }, note)));
        }
    }
    return noteElement;
}
function DefinitionList({ items, responsive, nameMaxWidth, contentMaxWidth = 'auto', className, itemClassName, copyPosition = 'outside', qa, }) {
    const keyStyle = nameMaxWidth
        ? {
            flexBasis: nameMaxWidth,
        }
        : {};
    const valueStyle = typeof contentMaxWidth === 'number'
        ? {
            flexBasis: contentMaxWidth,
            maxWidth: contentMaxWidth,
        }
        : {};
    const normalizedItems = react_1.default.useMemo(() => {
        return items.map((value, index) => (Object.assign(Object.assign({}, value), { key: index })));
    }, [items]);
    return (react_1.default.createElement("dl", { className: (0, exports.b)({ responsive }, className), "data-qa": qa }, normalizedItems.map(({ name, key, content, contentTitle, nameTitle, copyText, note, multilineName }) => {
        const definitionContent = content !== null && content !== void 0 ? content : 'â€”';
        const iconInside = copyPosition === 'inside';
        const definition = copyText ? (react_1.default.createElement("div", { className: (0, exports.b)('copy-container', { 'icon-inside': iconInside }) },
            react_1.default.createElement("span", null, definitionContent),
            react_1.default.createElement(uikit_1.ClipboardButton, { size: "s", text: copyText, className: (0, exports.b)('copy-button'), view: iconInside ? 'raised' : 'flat-secondary' }))) : (definitionContent);
        const noteElement = (react_1.default.createElement(react_1.default.Fragment, null,
            "\u00A0",
            getNoteElement(note)));
        return (react_1.default.createElement("div", { key: key, className: (0, exports.b)('item', itemClassName) },
            react_1.default.createElement("dt", { className: (0, exports.b)('term-container', { multiline: multilineName }), style: keyStyle },
                react_1.default.createElement("div", { className: (0, exports.b)('term-wrapper') },
                    react_1.default.createElement("span", { title: getTitle(nameTitle, name) }, name),
                    multilineName && noteElement),
                !multilineName && noteElement,
                react_1.default.createElement("div", { className: (0, exports.b)('dots', { 'with-note': Boolean(note) }) })),
            react_1.default.createElement("dd", { className: (0, exports.b)('definition'), title: getTitle(contentTitle, content), style: Object.assign(Object.assign({}, valueStyle), { lineBreak: typeof content === 'string' &&
                        (0, utils_1.isUnbreakableOver)(20)(content)
                        ? 'anywhere'
                        : undefined }) }, definition)));
    })));
}
exports.DefinitionList = DefinitionList;
