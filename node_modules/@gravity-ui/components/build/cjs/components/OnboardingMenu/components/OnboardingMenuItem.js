"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnboardingMenuItem = void 0;
const react_1 = __importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../utils/cn");
require("./OnboardingMenuItem.css");
const ICON_SIZE = 20;
const cnOnboardingMenuItem = (0, cn_1.block)('onboarding-menu-item');
const OnboardingMenuItem = ({ title, status, children, defaultExpanded, buttons, hasDivider = true, loading = false, }) => {
    const icon = react_1.default.useMemo(() => {
        if (status === 'pending') {
            return (react_1.default.createElement(uikit_1.Icon, { size: ICON_SIZE, data: icons_1.Clock, className: cnOnboardingMenuItem('status-icon_pending') }));
        }
        if (status === 'completed') {
            return (react_1.default.createElement(uikit_1.Icon, { size: ICON_SIZE, data: icons_1.CircleCheckFill, className: cnOnboardingMenuItem('status-icon') }));
        }
        return (react_1.default.createElement(uikit_1.Icon, { size: ICON_SIZE, data: icons_1.CircleCheckFill, className: cnOnboardingMenuItem('status-icon_disabled') }));
    }, [status]);
    const summary = (react_1.default.createElement("div", { className: cnOnboardingMenuItem('collapse-header') },
        react_1.default.createElement("div", { className: cnOnboardingMenuItem('icon') }, icon),
        react_1.default.createElement("span", { className: cnOnboardingMenuItem('title') }, title)));
    const header = children ? (react_1.default.createElement(uikit_1.Disclosure, { size: "l", className: cnOnboardingMenuItem('title-header'), defaultExpanded: defaultExpanded },
        react_1.default.createElement(uikit_1.Disclosure.Summary, null, (props) => (react_1.default.createElement("button", Object.assign({}, props, { className: cnOnboardingMenuItem('title-summary') }),
            summary,
            react_1.default.createElement(uikit_1.ArrowToggle, { direction: props.expanded ? 'top' : 'bottom' })))),
        react_1.default.createElement("div", { className: cnOnboardingMenuItem('node') }, children),
        buttons && react_1.default.createElement("div", { className: cnOnboardingMenuItem('buttons') }, buttons))) : (summary);
    if (loading) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement("div", { className: cnOnboardingMenuItem('skeleton') },
                react_1.default.createElement(uikit_1.Skeleton, { className: cnOnboardingMenuItem('skeleton-avatar'), style: { width: `${ICON_SIZE}px`, height: `${ICON_SIZE}px` } }),
                react_1.default.createElement(uikit_1.Skeleton, { className: cnOnboardingMenuItem('skeleton-title') })),
            hasDivider && react_1.default.createElement("div", { className: cnOnboardingMenuItem('divider') })));
    }
    return (react_1.default.createElement("div", { className: cnOnboardingMenuItem() },
        react_1.default.createElement("div", { className: cnOnboardingMenuItem('collapse') }, header),
        hasDivider && react_1.default.createElement("div", { className: cnOnboardingMenuItem('divider') })));
};
exports.OnboardingMenuItem = OnboardingMenuItem;
