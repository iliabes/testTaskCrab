"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Item = void 0;
const react_1 = __importDefault(require("react"));
const date_utils_1 = require("@gravity-ui/date-utils");
const icons_1 = require("@gravity-ui/icons");
const uikit_1 = require("@gravity-ui/uikit");
const cn_1 = require("../../../utils/cn");
const i18n_1 = require("../../i18n");
const Picture_1 = require("../Picture/Picture");
require("./Item.css");
const b = (0, cn_1.block)('changelog-dialog-item');
const formatLangDisplay = {
    'YYYY-MM-DD': {
        en: 'D MMMM YYYY',
    },
    'YYYY-MM': {
        en: 'MMMM YYYY',
    },
    YYYY: {
        ru: 'YYYY год',
        en: 'YYYY',
    },
};
function Item({ className, data, onStoryClick, onLinkClick }) {
    const handleLinkClick = react_1.default.useCallback(() => {
        if (onLinkClick && data.link) {
            onLinkClick(data.link);
        }
    }, [data.link, onLinkClick]);
    const handleStoryClick = react_1.default.useCallback(() => {
        if (onStoryClick && data.storyId) {
            onStoryClick(data.storyId);
        }
    }, [data.storyId, onStoryClick]);
    const formattedDate = react_1.default.useMemo(() => {
        let value;
        if (!data.date)
            return value;
        const { lang } = (0, uikit_1.getConfig)();
        Object.keys(formatLangDisplay).some((format) => {
            const langFormat = formatLangDisplay[format];
            const dt = (0, date_utils_1.dateTimeParse)(data.date, { format });
            if (dt === null || dt === void 0 ? void 0 : dt.isValid()) {
                value = dt.format(langFormat[lang] || langFormat.en);
                return true;
            }
            return false;
        });
        return value;
    }, [data.date]);
    return (react_1.default.createElement("article", { className: b(null, className) },
        react_1.default.createElement("div", { className: b('meta') },
            formattedDate ? react_1.default.createElement("div", { className: b('date') }, formattedDate) : null,
            data.isNew ? (react_1.default.createElement(uikit_1.Label, { className: b('label-new'), theme: "info" }, (0, i18n_1.i18n)('label_new'))) : null),
        react_1.default.createElement("div", { className: b('content') },
            react_1.default.createElement("h3", { className: b('title') }, data.title),
            data.image && data.image.src ? (react_1.default.createElement(Picture_1.Picture, { className: b('image'), src: data.image.src, ratio: data.image.ratio, alt: data.image.alt })) : null,
            data.description ? (react_1.default.createElement("div", { className: b('description') }, data.description)) : null,
            data.link ? (react_1.default.createElement(uikit_1.Button, { className: b('button'), view: "outlined", href: data.link, target: '_blank', onClick: handleLinkClick }, (0, i18n_1.i18n)('action_read-more'))) : null,
            data.storyId && onStoryClick ? (react_1.default.createElement(uikit_1.Button, { className: b('button'), view: "outlined-action", onClick: handleStoryClick },
                (0, i18n_1.i18n)('button_view_story'),
                react_1.default.createElement(uikit_1.Icon, { data: icons_1.CirclePlay, size: 14 }))) : null)));
}
exports.Item = Item;
