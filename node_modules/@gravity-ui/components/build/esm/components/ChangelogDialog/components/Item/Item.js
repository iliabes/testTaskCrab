import React from 'react';
import { dateTimeParse } from '@gravity-ui/date-utils';
import { CirclePlay } from '@gravity-ui/icons';
import { Button, Icon, Label, getConfig } from '@gravity-ui/uikit';
import { block } from '../../../utils/cn';
import { i18n } from '../../i18n';
import { Picture } from '../Picture/Picture';
import './Item.css';
const b = block('changelog-dialog-item');
const formatLangDisplay = {
    'YYYY-MM-DD': {
        en: 'D MMMM YYYY',
    },
    'YYYY-MM': {
        en: 'MMMM YYYY',
    },
    YYYY: {
        ru: 'YYYY год',
        en: 'YYYY',
    },
};
export function Item({ className, data, onStoryClick, onLinkClick }) {
    const handleLinkClick = React.useCallback(() => {
        if (onLinkClick && data.link) {
            onLinkClick(data.link);
        }
    }, [data.link, onLinkClick]);
    const handleStoryClick = React.useCallback(() => {
        if (onStoryClick && data.storyId) {
            onStoryClick(data.storyId);
        }
    }, [data.storyId, onStoryClick]);
    const formattedDate = React.useMemo(() => {
        let value;
        if (!data.date)
            return value;
        const { lang } = getConfig();
        Object.keys(formatLangDisplay).some((format) => {
            const langFormat = formatLangDisplay[format];
            const dt = dateTimeParse(data.date, { format });
            if (dt === null || dt === void 0 ? void 0 : dt.isValid()) {
                value = dt.format(langFormat[lang] || langFormat.en);
                return true;
            }
            return false;
        });
        return value;
    }, [data.date]);
    return (React.createElement("article", { className: b(null, className) },
        React.createElement("div", { className: b('meta') },
            formattedDate ? React.createElement("div", { className: b('date') }, formattedDate) : null,
            data.isNew ? (React.createElement(Label, { className: b('label-new'), theme: "info" }, i18n('label_new'))) : null),
        React.createElement("div", { className: b('content') },
            React.createElement("h3", { className: b('title') }, data.title),
            data.image && data.image.src ? (React.createElement(Picture, { className: b('image'), src: data.image.src, ratio: data.image.ratio, alt: data.image.alt })) : null,
            data.description ? (React.createElement("div", { className: b('description') }, data.description)) : null,
            data.link ? (React.createElement(Button, { className: b('button'), view: "outlined", href: data.link, target: '_blank', onClick: handleLinkClick }, i18n('action_read-more'))) : null,
            data.storyId && onStoryClick ? (React.createElement(Button, { className: b('button'), view: "outlined-action", onClick: handleStoryClick },
                i18n('button_view_story'),
                React.createElement(Icon, { data: CirclePlay, size: 14 }))) : null)));
}
