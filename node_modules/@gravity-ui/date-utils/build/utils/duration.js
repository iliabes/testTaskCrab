"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDuration = void 0;
var isNumber_1 = __importDefault(require("lodash/isNumber"));
var dateTime_1 = require("../dateTime");
var utils_1 = require("./utils");
var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
// eslint-disable-next-line complexity
function getDuration(amount, unit) {
    var duration = {};
    var match = null;
    if (amount === null || amount === undefined) {
    }
    else if ((0, dateTime_1.isDateTime)(amount)) {
        duration[unit ? unit : 'milliseconds'] = amount.valueOf();
    }
    else if ((0, isNumber_1.default)(amount) || !isNaN(Number(amount))) {
        duration[unit ? unit : 'milliseconds'] = Number(amount);
    }
    else if (typeof amount === 'string' && (match = isoRegex.exec(amount))) {
        var sign = match[1] === '-' ? -1 : 1;
        duration = {
            y: parseIso(match[2]) * sign,
            M: parseIso(match[3]) * sign,
            w: parseIso(match[4]) * sign,
            d: parseIso(match[5]) * sign,
            h: parseIso(match[6]) * sign,
            m: parseIso(match[7]) * sign,
            s: parseIso(match[8]) * sign,
        };
    }
    else if (typeof amount === 'object') {
        duration = amount;
    }
    var normalizedInput = (0, utils_1.normalizeDateComponents)(duration);
    var years = normalizedInput.year || 0;
    var quarters = normalizedInput.quarter || 0;
    var months = normalizedInput.month || 0;
    var weeks = normalizedInput.weekNumber || normalizedInput.isoWeekNumber || 0;
    var days = normalizedInput.day || 0;
    var hours = normalizedInput.hour || 0;
    var minutes = normalizedInput.minute || 0;
    var seconds = normalizedInput.second || 0;
    var milliseconds = normalizedInput.millisecond || 0;
    var _milliseconds = milliseconds + seconds * 1000 + minutes * 1000 * 60 + hours * 1000 * 60 * 60;
    var _days = Number(days) + weeks * 7;
    var _months = Number(months) + quarters * 3 + years * 12;
    return {
        milliseconds: _milliseconds,
        days: _days,
        months: _months,
    };
}
exports.getDuration = getDuration;
function parseIso(inp) {
    var res = inp ? parseFloat(inp.replace(',', '.')) : 0;
    return isNaN(res) ? 0 : res;
}
