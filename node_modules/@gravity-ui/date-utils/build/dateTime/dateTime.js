"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dateTimeUtc = exports.dateTime = exports.isDateTime = void 0;
var constants_1 = require("../constants");
var dayjs_1 = __importDefault(require("../dayjs"));
var settings_1 = require("../settings");
var timeZone_1 = require("../timeZone");
var utils_1 = require("../utils");
var IS_DATE_TIME = Symbol('isDateTime');
var DateTimeImpl = /** @class */ (function () {
    function DateTimeImpl(opt) {
        this[IS_DATE_TIME] = true;
        this._timestamp = opt.ts;
        this._locale = opt.locale;
        this._timeZone = opt.timeZone;
        this._offset = opt.offset;
        this._date = opt.date;
    }
    DateTimeImpl.isDateTime = function (o) {
        return ((typeof o === 'object' && o && IS_DATE_TIME in o && o[IS_DATE_TIME] === true) || false);
    };
    DateTimeImpl.prototype.format = function (formatInput) {
        return this._date.format(formatInput);
    };
    DateTimeImpl.prototype.toISOString = function (keepOffset) {
        if (keepOffset) {
            return this._date.format('YYYY-MM-DDTHH:mm:ss.SSSZ');
        }
        return this._date.toISOString();
    };
    DateTimeImpl.prototype.utcOffset = function (offset, keepLocalTime) {
        var isSetOffset = offset !== undefined && offset !== null;
        if (!this.isValid()) {
            return isSetOffset ? this : NaN;
        }
        if (isSetOffset) {
            var newOffset = void 0;
            if (typeof offset === 'string') {
                newOffset = (0, utils_1.offsetFromString)(offset);
                if (newOffset === null) {
                    return this;
                }
            }
            else if (Math.abs(offset) < 16) {
                newOffset = offset * 60;
            }
            else {
                newOffset = offset;
            }
            var ts = this.valueOf();
            if (keepLocalTime) {
                ts -= (newOffset - this._offset) * 60 * 1000;
            }
            return createDateTime({
                ts: ts,
                timeZone: constants_1.UtcTimeZone,
                offset: newOffset,
                locale: this._locale,
            });
        }
        return this._offset;
    };
    DateTimeImpl.prototype.timeZone = function (timeZone, keepLocalTime) {
        var _a;
        if (timeZone === undefined) {
            return this._timeZone === 'system' ? (0, timeZone_1.guessUserTimeZone)() : this._timeZone;
        }
        var zone = (0, timeZone_1.normalizeTimeZone)(timeZone, settings_1.settings.getDefaultTimeZone());
        var ts = this.valueOf();
        var offset = (0, timeZone_1.timeZoneOffset)(zone, ts);
        if (keepLocalTime) {
            ts += this._offset * 60 * 1000;
            _a = (0, timeZone_1.fixOffset)(ts, offset, zone), ts = _a[0], offset = _a[1];
        }
        return createDateTime({ ts: ts, timeZone: zone, offset: offset, locale: this._locale });
    };
    DateTimeImpl.prototype.add = function (amount, unit) {
        return this.addSubtract(amount, unit, 1);
    };
    DateTimeImpl.prototype.subtract = function (amount, unit) {
        return this.addSubtract(amount, unit, -1);
    };
    DateTimeImpl.prototype.startOf = function (unitOfTime) {
        if (!this.isValid()) {
            return this;
        }
        var dateComponents = {};
        var unit = (0, utils_1.normalizeComponent)(unitOfTime);
        /* eslint-disable no-fallthrough */
        switch (unit) {
            case 'year':
            case 'quarter':
                if (unit === 'quarter') {
                    dateComponents.month = this.month() - (this.month() % 3);
                }
                else {
                    dateComponents.month = 0;
                }
            case 'month':
            case 'weekNumber':
            case 'isoWeekNumber':
                if (unit === 'weekNumber') {
                    dateComponents.date = this.date() - this.weekday();
                }
                else if (unit === 'isoWeekNumber') {
                    dateComponents.date = this.date() - (this.isoWeekday() - 1);
                }
                else {
                    dateComponents.date = 1;
                }
            case 'day':
            case 'date':
            case 'isoWeekday':
                dateComponents.hour = 0;
            case 'hour':
                dateComponents.minute = 0;
            case 'minute':
                dateComponents.second = 0;
            case 'second': {
                dateComponents.millisecond = 0;
            }
        }
        /* eslint-enable no-fallthrough */
        return this.set(dateComponents);
    };
    DateTimeImpl.prototype.endOf = function (unitOfTime) {
        var _a;
        if (!this.isValid()) {
            return this;
        }
        var dateComponents = {};
        var unit = (0, utils_1.normalizeComponent)(unitOfTime);
        /* eslint-disable no-fallthrough */
        switch (unit) {
            case 'year':
            case 'quarter':
                if (unit === 'quarter') {
                    dateComponents.month = this.month() - (this.month() % 3) + 2;
                }
                else {
                    dateComponents.month = 11;
                }
            case 'month':
            case 'weekNumber':
            case 'isoWeekNumber':
                if (unit === 'weekNumber') {
                    dateComponents.date = this.date() - this.weekday() + 6;
                }
                else if (unit === 'isoWeekNumber') {
                    dateComponents.date = this.date() - (this.isoWeekday() - 1) + 6;
                }
                else {
                    dateComponents.date = (0, utils_1.daysInMonth)(this.year(), (_a = dateComponents.month) !== null && _a !== void 0 ? _a : this.month());
                }
            case 'day':
            case 'date':
            case 'isoWeekday':
                dateComponents.hour = 23;
            case 'hour':
                dateComponents.minute = 59;
            case 'minute':
                dateComponents.second = 59;
            case 'second': {
                dateComponents.millisecond = 999;
            }
        }
        /* eslint-enable no-fallthrough */
        return this.set(dateComponents);
    };
    DateTimeImpl.prototype.local = function (keepLocalTime) {
        return this.timeZone('system', keepLocalTime);
    };
    DateTimeImpl.prototype.valueOf = function () {
        return this._timestamp;
    };
    DateTimeImpl.prototype.isSame = function (input, granularity) {
        var ts = getTimestamp(input);
        if (!this.isValid() || isNaN(ts)) {
            return false;
        }
        return !this.isBefore(ts, granularity) && !this.isAfter(ts, granularity);
    };
    DateTimeImpl.prototype.isBefore = function (input, granularity) {
        var ts = getTimestamp(input);
        if (!this.isValid() || isNaN(ts)) {
            return false;
        }
        var unit = (0, utils_1.normalizeComponent)(granularity !== null && granularity !== void 0 ? granularity : 'millisecond');
        var localTs = unit === 'millisecond' ? this.valueOf() : this.endOf(unit).valueOf();
        return localTs < ts;
    };
    DateTimeImpl.prototype.isAfter = function (input, granularity) {
        var ts = getTimestamp(input);
        if (!this.isValid() || isNaN(ts)) {
            return false;
        }
        var unit = (0, utils_1.normalizeComponent)(granularity !== null && granularity !== void 0 ? granularity : 'millisecond');
        var localTs = unit === 'millisecond' ? this.valueOf() : this.startOf(unit).valueOf();
        return localTs > ts;
    };
    DateTimeImpl.prototype.isValid = function () {
        return this._date.isValid();
    };
    DateTimeImpl.prototype.diff = function (amount, unit, asFloat) {
        var value = DateTimeImpl.isDateTime(amount) ? amount.valueOf() : amount;
        return this._date.diff(value, unit, asFloat);
    };
    DateTimeImpl.prototype.fromNow = function (withoutSuffix) {
        return this._date.fromNow(withoutSuffix);
    };
    DateTimeImpl.prototype.from = function (formaInput, withoutSuffix) {
        var value = DateTimeImpl.isDateTime(formaInput) ? formaInput.valueOf() : formaInput;
        return this._date.from(value, withoutSuffix);
    };
    DateTimeImpl.prototype.locale = function (locale) {
        if (!locale) {
            return this._locale;
        }
        return createDateTime({
            ts: this.valueOf(),
            timeZone: this._timeZone,
            offset: this._offset,
            locale: dayjs_1.default.locale(locale, undefined, true),
        });
    };
    DateTimeImpl.prototype.toDate = function () {
        return new Date(this.valueOf());
    };
    DateTimeImpl.prototype.unix = function () {
        return Math.floor(this.valueOf() / 1000);
    };
    DateTimeImpl.prototype.utc = function (keepLocalTime) {
        return this.timeZone(constants_1.UtcTimeZone, keepLocalTime);
    };
    DateTimeImpl.prototype.daysInMonth = function () {
        return this._date.daysInMonth();
    };
    DateTimeImpl.prototype.set = function (unit, amount) {
        var _a, _b;
        var dateComponents = (0, utils_1.tsToObject)(this._timestamp, this._offset);
        var newComponents = (0, utils_1.normalizeDateComponents)(typeof unit === 'object' ? unit : (_a = {}, _a[unit] = amount, _a));
        var settingWeekStuff = newComponents.weekNumber !== undefined ||
            newComponents.day !== undefined ||
            newComponents.isoWeekNumber !== undefined ||
            newComponents.isoWeekday !== undefined;
        var containsYearOrMonthDay = newComponents.year !== undefined ||
            newComponents.month !== undefined ||
            newComponents.date !== undefined;
        if (settingWeekStuff && containsYearOrMonthDay) {
            throw new Error("Can't mix weekYear/weekNumber units with year/month/day");
        }
        var mixed;
        if (settingWeekStuff) {
            var date = dayjs_1.default.utc((0, utils_1.objToTS)(__assign(__assign({}, dateComponents), newComponents)));
            var toDayjsUnit = {
                weekNumber: 'week',
                day: 'day',
                isoWeekNumber: 'isoWeek',
                isoWeekday: 'isoWeekday',
            };
            for (var _i = 0, _c = ['weekNumber', 'day', 'isoWeekNumber', 'isoWeekday']; _i < _c.length; _i++) {
                var u = _c[_i];
                var v = newComponents[u];
                if (v !== undefined) {
                    date = date[toDayjsUnit[u]](v);
                }
            }
            mixed = (0, utils_1.tsToObject)(date.valueOf(), 0);
        }
        else {
            mixed = __assign(__assign({}, dateComponents), newComponents);
            if (newComponents.date === undefined) {
                mixed.date = Math.min((0, utils_1.daysInMonth)(mixed.year, mixed.month), mixed.date);
            }
        }
        var ts = (0, utils_1.objToTS)(mixed);
        var offset = this._offset;
        if (this._timeZone === constants_1.UtcTimeZone) {
            ts -= offset * 60 * 1000;
        }
        else {
            _b = (0, timeZone_1.fixOffset)(ts, offset, this._timeZone), ts = _b[0], offset = _b[1];
        }
        return createDateTime({
            ts: ts,
            timeZone: this._timeZone,
            offset: offset,
            locale: this._locale,
        });
    };
    DateTimeImpl.prototype.date = function (value) {
        if (typeof value === 'number') {
            return this.set('date', value);
        }
        return this._date.date();
    };
    DateTimeImpl.prototype.month = function (value) {
        if (typeof value === 'number') {
            return this.set('month', value);
        }
        return this._date.month();
    };
    DateTimeImpl.prototype.quarter = function (value) {
        if (typeof value === 'number') {
            return this.set('quarter', value);
        }
        return this._date.quarter();
    };
    DateTimeImpl.prototype.year = function (value) {
        if (typeof value === 'number') {
            return this.set('year', value);
        }
        return this._date.year();
    };
    DateTimeImpl.prototype.day = function (value) {
        if (typeof value === 'number') {
            return this.set('day', value);
        }
        return this._date.day();
    };
    DateTimeImpl.prototype.isoWeekday = function (day) {
        if (day === undefined) {
            return this._date.isoWeekday();
        }
        return this.day(this.day() % 7 ? day : day - 7);
    };
    DateTimeImpl.prototype.hour = function (value) {
        if (typeof value === 'number') {
            return this.set('hour', value);
        }
        return this._date.hour();
    };
    DateTimeImpl.prototype.minute = function (value) {
        if (typeof value === 'number') {
            return this.set('minute', value);
        }
        return this._date.minute();
    };
    DateTimeImpl.prototype.second = function (value) {
        if (typeof value === 'number') {
            return this.set('second', value);
        }
        return this._date.second();
    };
    DateTimeImpl.prototype.millisecond = function (value) {
        if (typeof value === 'number') {
            return this.set('millisecond', value);
        }
        return this._date.millisecond();
    };
    DateTimeImpl.prototype.week = function (value) {
        if (typeof value === 'number') {
            return this.set('week', value);
        }
        return this._date.week();
    };
    DateTimeImpl.prototype.isoWeek = function (value) {
        if (typeof value === 'number') {
            return this.set('isoWeek', value);
        }
        return this._date.isoWeek();
    };
    DateTimeImpl.prototype.weekday = function () {
        // @ts-expect-error get locale object
        var weekStart = this._date.$locale().weekStart || 0;
        var day = this.day();
        var weekday = (day < weekStart ? day + 7 : day) - weekStart;
        return weekday;
    };
    DateTimeImpl.prototype.toString = function () {
        return this._date.toString();
    };
    DateTimeImpl.prototype.addSubtract = function (amount, unit, sign) {
        var _a;
        if (!this.isValid()) {
            return this;
        }
        var timeZone = this._timeZone;
        var ts = this.valueOf();
        var offset = this._offset;
        var duration = (0, utils_1.getDuration)(amount, unit);
        var dateComponents = (0, utils_1.tsToObject)(ts, offset);
        var monthsInput = absRound(duration.months);
        var daysInput = absRound(duration.days);
        if (monthsInput || daysInput) {
            var month = dateComponents.month + sign * monthsInput;
            var date = Math.min(dateComponents.date, (0, utils_1.daysInMonth)(dateComponents.year, month)) +
                sign * daysInput;
            ts = (0, utils_1.objToTS)(__assign(__assign({}, dateComponents), { month: month, date: date }));
            if (timeZone === constants_1.UtcTimeZone) {
                ts -= offset * 60 * 1000;
            }
            else {
                _a = (0, timeZone_1.fixOffset)(ts, offset, timeZone), ts = _a[0], offset = _a[1];
            }
        }
        if (duration.milliseconds) {
            ts += sign * duration.milliseconds;
            if (timeZone !== constants_1.UtcTimeZone) {
                offset = (0, timeZone_1.timeZoneOffset)(timeZone, ts);
            }
        }
        return createDateTime({
            ts: ts,
            timeZone: timeZone,
            offset: offset,
            locale: this._locale,
        });
    };
    return DateTimeImpl;
}());
function absRound(v) {
    var sign = v < 0 ? -1 : 1;
    return Math.round(sign * v) * sign;
}
function createDateTime(_a) {
    var _b;
    var ts = _a.ts, timeZone = _a.timeZone, offset = _a.offset, locale = _a.locale;
    var date;
    if (timeZone === 'system') {
        date = (0, dayjs_1.default)(ts, { locale: locale });
    }
    else {
        var localOffset = (0, timeZone_1.timeZoneOffset)('system', ts);
        var newTs = ts;
        if (offset !== 0 && localOffset !== offset) {
            newTs += offset * 60 * 1000;
            _b = (0, timeZone_1.fixOffset)(newTs, localOffset, 'system'), newTs = _b[0], localOffset = _b[1];
        }
        date = (0, dayjs_1.default)(newTs, {
            locale: locale,
            utc: offset === 0,
            // @ts-expect-error private fields used by utc and timezone plugins
            $offset: offset ? offset : undefined,
            x: { $timezone: timeZone, $localOffset: -localOffset },
        });
    }
    return new DateTimeImpl({ ts: ts, timeZone: timeZone, offset: offset, locale: locale, date: date });
}
function getTimestamp(input, format, lang) {
    var locale = dayjs_1.default.locale(lang || settings_1.settings.getLocale(), undefined, true);
    var ts;
    if (DateTimeImpl.isDateTime(input) || typeof input === 'number' || input instanceof Date) {
        ts = Number(input);
    }
    else {
        var localDate = format
            ? (0, dayjs_1.default)(input, format, locale, constants_1.STRICT)
            : (0, dayjs_1.default)(input, undefined, locale);
        ts = localDate.valueOf();
    }
    return ts;
}
/**
 * Checks if value is DateTime.
 * @param {unknown} value - value to check.
 */
var isDateTime = function (value) {
    return DateTimeImpl.isDateTime(value);
};
exports.isDateTime = isDateTime;
/**
 * Creates a DateTime instance.
 * @param opt
 * @param {DateTimeInput=} opt.input - input to parse.
 * @param {string=} opt.format - strict {@link https://dayjs.gitee.io/docs/en/display/format format} for parsing user's input.
 * @param {string=} opt.timeZone - specified {@link https://dayjs.gitee.io/docs/en/timezone/timezone time zone}.
 * @param {string=} opt.lang - specified locale.
 */
function dateTime(opt) {
    var _a = opt || {}, input = _a.input, format = _a.format, timeZone = _a.timeZone, lang = _a.lang;
    var timeZoneOrDefault = (0, timeZone_1.normalizeTimeZone)(timeZone, settings_1.settings.getDefaultTimeZone());
    var locale = dayjs_1.default.locale(lang || settings_1.settings.getLocale(), undefined, true);
    var ts = getTimestamp(input, format, lang);
    var offset = (0, timeZone_1.timeZoneOffset)(timeZoneOrDefault, ts);
    var date = createDateTime({
        ts: ts,
        timeZone: timeZoneOrDefault,
        offset: offset,
        locale: locale,
    });
    return date;
}
exports.dateTime = dateTime;
function dateTimeUtc(opt) {
    var _a = opt || {}, input = _a.input, format = _a.format, lang = _a.lang;
    var locale = dayjs_1.default.locale(lang || settings_1.settings.getLocale(), undefined, true);
    var ts;
    if (DateTimeImpl.isDateTime(input) || typeof input === 'number' || input instanceof Date) {
        ts = Number(input);
    }
    else {
        ts = dayjs_1.default.utc(input, format, constants_1.STRICT).valueOf();
    }
    var date = createDateTime({
        ts: ts,
        timeZone: constants_1.UtcTimeZone,
        offset: 0,
        locale: locale,
    });
    return date;
}
exports.dateTimeUtc = dateTimeUtc;
