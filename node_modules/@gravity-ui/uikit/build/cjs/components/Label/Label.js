"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const icons_1 = require("@gravity-ui/icons");
const Button_1 = require("../Button");
const ClipboardIcon_1 = require("../ClipboardIcon");
const CopyToClipboard_1 = require("../CopyToClipboard");
const Icon_1 = require("../Icon");
const cn_1 = require("../utils/cn");
require("./Label.css");
const b = (0, cn_1.block)('label');
const sizeMap = {
    xs: { copyIconSize: 12, closeIconSize: 12, buttonSize: 'xs' },
    s: { copyIconSize: 14, closeIconSize: 14, buttonSize: 's' },
    m: { copyIconSize: 16, closeIconSize: 16, buttonSize: 'm' },
};
const commonActionButtonProps = {
    pin: 'brick-round',
    className: b('addon', {
        side: 'right',
        interactive: true,
    }),
};
exports.Label = react_1.default.forwardRef(function Label(props, ref) {
    const { type = 'default', theme = 'normal', size = 'xs', icon, children, onCloseClick, className, disabled, copyText, closeButtonLabel, copyButtonLabel, interactive = false, value, onCopy, onClick, qa, } = props;
    const hasContent = Boolean(children !== '' && react_1.default.Children.count(children) > 0);
    const typeClose = type === 'close' && hasContent;
    const typeCopy = type === 'copy' && hasContent;
    const hasOnClick = typeof onClick === 'function';
    const hasCopy = Boolean(typeCopy && copyText);
    const isInteractive = (hasOnClick || hasCopy || interactive) && !disabled;
    const { copyIconSize, closeIconSize, buttonSize } = sizeMap[size];
    const leftIcon = icon && (react_1.default.createElement("div", { className: b('addon', { side: hasContent ? 'left' : undefined }) }, icon));
    const content = hasContent && (react_1.default.createElement("div", { className: b('text') },
        react_1.default.createElement("div", { className: b('content') }, children),
        Boolean(value) && (react_1.default.createElement("div", { className: b('value') },
            react_1.default.createElement("div", { className: b('separator') }, ":"),
            react_1.default.createElement("div", { className: b('key') }, value)))));
    const renderLabel = (status) => {
        let actionButton;
        if (typeCopy) {
            actionButton = (react_1.default.createElement(Button_1.Button, Object.assign({ size: buttonSize, extraProps: { 'aria-label': copyButtonLabel || undefined }, onClick: hasOnClick ? onClick : undefined, disabled: disabled }, commonActionButtonProps),
                react_1.default.createElement(Button_1.Button.Icon, null,
                    react_1.default.createElement(ClipboardIcon_1.ClipboardIcon, { status: status || 'pending', size: copyIconSize }))));
        }
        else if (typeClose) {
            actionButton = (react_1.default.createElement(Button_1.Button, Object.assign({ onClick: onCloseClick, size: buttonSize, extraProps: { 'aria-label': closeButtonLabel || undefined }, disabled: disabled }, commonActionButtonProps),
                react_1.default.createElement(Icon_1.Icon, { size: closeIconSize, data: icons_1.Xmark })));
        }
        return (react_1.default.createElement("div", { ref: ref, className: b({
                theme,
                size,
                type,
                'is-interactive': isInteractive,
                'has-right-addon': Boolean(actionButton),
                'has-left-addon': Boolean(leftIcon),
                disabled,
            }, className), "data-qa": qa },
            leftIcon,
            hasOnClick ? (react_1.default.createElement("button", { disabled: disabled, type: "button", onClick: onClick, className: b('action-button') }, content)) : (content),
            actionButton));
    };
    if (hasCopy && copyText && !hasOnClick) {
        return (react_1.default.createElement(CopyToClipboard_1.CopyToClipboard, { text: copyText, onCopy: onCopy, timeout: 1000 }, (status) => renderLabel(status)));
    }
    return renderLabel();
});
