import React from 'react';
import type { TreeSelectProps } from '../../../TreeSelect';
import type { TableColumnConfig, TableDataItem, TableProps } from '../../Table';
import type { RenderControls, TableColumnSetupItem } from './TableColumnSetup/TableColumnSetup';
import './withTableSettings.css';
export type TableSetting = {
    id: string;
    isSelected?: boolean;
};
export type TableSettingsData = TableSetting[];
export declare function filterColumns<I>(columns: TableColumnConfig<I>[], settings: TableSettingsData): TableColumnConfig<I>[];
export declare function getColumnStringTitle<Data>(column: TableColumnConfig<Data>): string;
export declare function getActualItems<I>(columns: TableColumnConfig<I>[], settings: TableSettingsData): TableColumnSetupItem[];
export interface WithTableSettingsOptions {
    width?: TreeSelectProps<any>['popupWidth'];
    sortable?: boolean;
}
export interface WithTableSettingsProps {
    /**
     * @deprecated Use factory notation: "withTableSettings({width: <value>})(Table)"
     */
    settingsPopupWidth?: TreeSelectProps<any>['popupWidth'];
    settings: TableSettingsData;
    updateSettings: (data: TableSettingsData) => void;
    /**
     * @deprecated
     */
    renderControls?: RenderControls;
}
export declare function withTableSettings<I extends TableDataItem, E extends {} = {}>(Component: React.ComponentType<TableProps<I> & E>): React.ComponentType<TableProps<I> & WithTableSettingsProps & E>;
export declare function withTableSettings<I extends TableDataItem, E extends {} = {}>(options?: WithTableSettingsOptions): (Component: React.ComponentType<TableProps<I> & E>) => React.ComponentType<TableProps<I> & WithTableSettingsProps & E>;
